openapi: 3.0.3
info:
  title: jdevtree Auth API
  description: Authentication microservice for jdevtree. Supports GitHub OAuth and
    local JWT auth flows.
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: Local development server
paths:
  /auth/oauth/github:
    post:
      summary: Login with GitHub
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponseWrapper'
        '500': &id001
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: INTERNAL_SERVER_ERROR
                  message:
                    type: string
                    example: Unexpected error occurred
              examples:
                internal_server_error:
                  summary: Internal server error
                  value:
                    code: INTERNAL_SERVER_ERROR
                    message: Unexpected error occurred
      tags:
        - Authentication
  /auth/oauth/github/link:
    post:
      summary: Link GitHub account
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        '200':
          description: GitHub linked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseWrapper'
        '500': *id001
        '401': &id003
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: UNAUTHORIZED
                  message:
                    type: string
                    example: Authentication token is missing or invalid
              examples:
                missingToken:
                  summary: Missing or invalid JWT token
                  value:
                    code: AUTH_TOKEN_MISSING
                    message: Authentication token is missing or invalid
        '403': &id002
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: FORBIDDEN
                  message:
                    type: string
                    example: You are not allowed to perform this action
              examples:
                accessDenied:
                  summary: Not allowed to perform this action
                  value:
                    code: ACCESS_DENIED
                    message: You are not allowed to perform this action
      tags:
        - Authentication
  /auth/refresh:
    post:
      summary: Refresh access token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshRequest'
      responses:
        '200':
          description: Token refreshed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponseWrapper'
        '500': *id001
        '403': *id002
      tags:
        - Authentication
  /auth/logout:
    post:
      summary: Logout and revoke tokens
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: logged_out
        '500': *id001
        '401': *id003
        '403': *id002
      tags:
        - Authentication
  /account/register:
    post:
      summary: Register a new local user
      tags:
        - Account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: Registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponseWrapper'
        '500': *id001
        '201':
          description: Account created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponseWrapper'
              examples:
                created:
                  summary: Account registered
                  value:
                    code: REGISTER_SUCCESS
                    message: Account successfully registered
                    data:
                      accessToken: jwt-token
                      refreshToken: refresh-token
                      user:
                        id: uuid
                        username: janedoe
                        email: jane@example.com
                        status: PENDING
        '400':
          description: Bad request due to validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  message:
                    type: string
              examples:
                username:
                  summary: username is missing
                  value:
                    code: MISSING_USERNAME
                    message: Username is required
                email:
                  summary: email is missing
                  value:
                    code: MISSING_EMAIL
                    message: Email is required
                password:
                  summary: password is missing
                  value:
                    code: MISSING_PASSWORD
                    message: Password is required
  /account/login:
    post:
      summary: Login using username and password
      tags:
        - Account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponseWrapper'
        '500': *id001
        '400':
          description: Bad request due to validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  message:
                    type: string
              examples:
                username:
                  summary: username is missing
                  value:
                    code: MISSING_USERNAME
                    message: Username is required
                password:
                  summary: password is missing
                  value:
                    code: MISSING_PASSWORD
                    message: Password is required
  /account/me:
    get:
      summary: Get authenticated user's profile
      tags:
        - Account
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseWrapper'
        '500': *id001
        '401': *id003
  /account/change-password:
    post:
      summary: Change password for logged-in user
      tags:
        - Account
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseWrapper'
        '500': *id001
        '401': *id003
        '403': *id002
        '400':
          description: Bad request due to validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  message:
                    type: string
              examples:
                currentPassword:
                  summary: currentPassword is missing
                  value:
                    code: MISSING_CURRENT_PASSWORD
                    message: Current password is required
                newPassword:
                  summary: newPassword is missing
                  value:
                    code: MISSING_NEW_PASSWORD
                    message: New password is required
  /account/reset-password/request:
    post:
      summary: Initiate password reset via email
      tags:
        - Account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequestRequest'
      responses:
        '200':
          description: Reset email sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '500': *id001
        '400':
          description: Bad request due to validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  message:
                    type: string
              examples:
                email:
                  summary: email is missing
                  value:
                    code: MISSING_EMAIL
                    message: Email is required
  /account/reset-password/confirm:
    post:
      summary: Confirm and perform password reset
      tags:
        - Account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordConfirmRequest'
      responses:
        '200':
          description: Password reset successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '500': *id001
        '400':
          description: Bad request due to validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  message:
                    type: string
              examples:
                token:
                  summary: token is missing
                  value:
                    code: MISSING_RESET_TOKEN
                    message: Reset token is required
                newPassword:
                  summary: newPassword is missing
                  value:
                    code: MISSING_NEW_PASSWORD
                    message: New password is required
  /account/send-verification:
    post:
      summary: Send verification email
      tags:
        - Account
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Verification email sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponse'
        '500': *id001
        '401': *id003
  /account/verify:
    post:
      summary: Verify email using token
      tags:
        - Account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyEmailRequest'
      responses:
        '200':
          description: Email verified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseWrapper'
        '500': *id001
        '403': *id002
        '400':
          description: Bad request due to validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                  message:
                    type: string
              examples:
                token:
                  summary: token is missing
                  value:
                    code: MISSING_VERIFICATION_TOKEN
                    message: Verification token is required
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ResponseEnvelope:
      type: object
      properties:
        code:
          type: string
          example: SUCCESS
        message:
          type: string
          example: Operation completed successfully
        data:
          type: object
      required:
        - code
        - message
        - data
    AuthResponseWrapper:
      allOf:
        - $ref: '#/components/schemas/ResponseEnvelope'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/AuthResponse'
    UserResponseWrapper:
      allOf:
        - $ref: '#/components/schemas/ResponseEnvelope'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/UserView'
    AuthRequest:
      type: object
      properties:
        code:
          type: string
        redirectUrl:
          type: string
      required:
        - code
        - redirectUrl
    RefreshRequest:
      type: object
      properties:
        refreshToken:
          type: string
      required:
        - refreshToken
    RefreshTokenRequest:
      type: object
      properties:
        refreshToken:
          type: string
      required:
        - refreshToken
    AuthResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserView'
        accessToken:
          type: string
        tokenType:
          type: string
          example: Bearer
        expiresIn:
          type: integer
          example: 3600
        refreshToken:
          type: string
    UserView:
      type: object
      properties:
        id:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174000
        username:
          type: string
          example: johndoe
        email:
          type: string
          format: email
          example: johndoe@example.com
        status:
          type: string
          enum:
            - ACTIVE
            - PENDING
            - INACTIVE
          example: ACTIVE
    RegisterRequest:
      type: object
      properties:
        username:
          type: string
          example: janedoe
        email:
          type: string
          format: email
          example: jane@example.com
        password:
          type: string
          format: password
          example: securePass123
      required:
        - username
        - email
        - password
    LoginRequest:
      type: object
      properties:
        username:
          type: string
          example: janedoe
        password:
          type: string
          format: password
          example: securePass123
      required:
        - username
        - password
    ChangePasswordRequest:
      type: object
      properties:
        currentPassword:
          type: string
          example: oldPass123
        newPassword:
          type: string
          example: newSecurePass456
      required:
        - currentPassword
        - newPassword
    ResetPasswordRequestRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: jane@example.com
      required:
        - email
    ResetPasswordConfirmRequest:
      type: object
      properties:
        token:
          type: string
          example: reset-token-xyz
        newPassword:
          type: string
          example: secureNewPass789
      required:
        - token
        - newPassword
    VerifyEmailRequest:
      type: object
      properties:
        token:
          type: string
          example: email-verification-token
      required:
        - token
    GenericSuccessResponse:
      allOf:
        - $ref: '#/components/schemas/ResponseEnvelope'
        - type: object
          properties:
            data:
              type: object
              properties:
                status:
                  type: string
                  example: ok
